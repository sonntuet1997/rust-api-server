use tonic::{Request, Response, Status};

use common::grpc::gpt_answer::gpt_answer::{
    gpt_answer_service_server::GptAnswerService, GetAnswerPayload, GetAnswerResponse,
};

/// Implementation of the gRPC service for generating answers to questions.
///
/// This struct represents the gRPC server implementation for answering questions. It implements
/// the `GptAnswerService` trait generated by Tonic, which defines the RPC methods for answering
/// questions.
#[derive(Debug, Default)]
pub struct GptAnswerServiceImpl {
    pub dummy_prop: String,
}

impl GptAnswerServiceImpl {
    pub fn new(dummy_prop: String) -> Self {
        Self { dummy_prop }
    }
}

#[tonic::async_trait]
impl GptAnswerService for GptAnswerServiceImpl {
    /// Handle the gRPC `get_answer` request.
    ///
    /// This method is called when a gRPC client sends a request to get an answer to a question.
    /// It receives a request containing the question payload and generates an answer based on
    /// the received question. The logic for generating the answer is yet to be implemented.
    ///
    /// # Arguments
    ///
    /// * `request`: A `Request` containing the `GetAnswerPayload` with the question.
    ///
    /// # Returns
    ///
    /// Returns a `Result` containing a `Response` with the `GetAnswerResponse` containing the
    /// generated answer if successful. If there's an error during processing, it returns a
    /// `Status` indicating the error.
    async fn get_answer(
        &self,
        request: Request<GetAnswerPayload>,
    ) -> Result<Response<GetAnswerResponse>, Status> {
        // Extract the payload containing the question from the request
        let payload = request.into_inner();

        // TODO: Implement your logic to generate an answer based on the question.
        // Placeholder logic: Generate an answer string
        let answer = format!("Answer to: {}, {}", payload.question, self.dummy_prop);

        // Construct a response containing the generated answer
        let response = GetAnswerResponse { answer };

        // Return the response
        Ok(Response::new(response))
    }
}
